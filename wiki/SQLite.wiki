#summary How to convert the Wiktionary parsed database (MySQL) into SQLite file.
#labels Phase-Implementation,MySQL,SQL,SQLite,wikt_parser

= Introduction =

Dictionary with GUI, i.e. *wiwordik*, can work with MySQL and SQLite. 
But... 
The user will be happy do not install MySQL, 
so we need to dump Wiktionary parsed database (MySQL) and to convert into SQLite format.

The wiwordik application will be distributed with SQLite file.

= Conversion =
== Tables' structure preparations ==

Prepare only once the SQLite file with table structures of the the Wiktionary parsed database (automatic mode):
  * `cd ./wiwordik/mysql2sqlite`
  * `mysqldump -u root -p --no-data --compatible=ansi --default-character-set=binary ruwikt20090707_parsed > wikt_parsed_structure_source.sql`
  * `mysql2sqlite.bat`

The result file with SQLite tables' structure is `wikt_parsed_structure.sql`.

Vim regular expressions (manual mode):
{{{
%s/COMMENT.*/,/g    // remove COMMENT
%s/unsigned\s*//g   // remove "unsigned"
%s/\n\?.*\PRIMARY KEY.*//g      // remove lines with text "PRIMARY KEY"
%s/AUTO_INCREMENT/PRIMARY KEY/g // replace AUTO_INCREMENT by PRIMARY KEY
%s/CHARACTER SET latin1 COLLATE latin1_bin\s*//g    // remove "CHAR... "
}}}

Update this file if the stucture of the Wiktionary parsed database is changed, if new language codes were added.

== Data conversion ===
Dump data of the the Wiktionary parsed database:
  * `mysqldump -u root -p --no-create-info --skip-extended-insert --compatible=ansi --default-character-set=binary ruwikt20090707_parsed > ruwikt20090707_parsed_data.sql`

Vim regular expressions in order to change data of INSERT commands into SQLite format:
{{{                             
                                // remove two types of lines:
%s/UNLOCK TABLES;\n//g          // UNLOCK TABLES;
%s/LOCK TABLES \".\+\n//g       // LOCK TABLES "page" WRITE;
%s/\\'/''/g                     // replace \' by ''
}}}

== Data and tables merging ==

Merge two files (with tables structure and data) into one:
  * `ruwikt20090707_parsed_data.sql += wikt_parsed_structure.sql`

== SQLite shell ==

Run SQLite, load and backup the SQLite database:
{{{
sqlite3
.read "C:/w/bin/ruwikt20090707_parsed_data.sql"
PRAGMA integrity_check;
.backup "C:/w/bin/ruwikt20090707.sqlite"
}}}

== SQLite file location ==

Copy SQLite file `ruwikt20090707.sqlite` to the folder `./wikokit/wiwordik/`.

== Java ==

Check that the file `wiwordik\src\wiwordik\Main.fx` contains the line:
{{{
wikt_parsed_conn.OpenSQLite(Connect.RUWIKT_HOST, Connect.RUWIKT_PARSED_DB, Connect.RUWIKT_USER, Connect.RUWIKT_PASS, LanguageType.ru);
}}}

Check that the file `common_wiki\src\wikipedia\sql\Connect.java` contains the line:
{{{
private void OpenSQLite() {
...
String s = "jdbc:sqlite:C:/w/bin/ruwikt20090707.sqlite";
}}}

= See also =
  * [wiwordikSetupExe] - How to compile wiwordik-setup-X.XX.jar and .exe with the created SQLite data file

= Links =
  * [http://componavt.livejournal.com/630.html Java MySQL to SQLite migration]